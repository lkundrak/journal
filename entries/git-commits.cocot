= <!-- rss:title -->Analyzing GIT commit data<!-- /rss:title --> =
<!-- date:Tue Feb 16 21:24:21 CET 2010 -->

<!-- rss:description -->

Given distributed version control systems store all the history in a local storage an access to
commit metadata as well as commits themselves is usually a lot faster compared to conventional
version control systems. Additionally, [http://git-scm.com/ GIT]
provides clever tooling that exposes information about
the commits, that can be nicely visualized via the means of {{{diffstat}}} and such, or exported
for further analysis with other tools.

I'll describe the process of getting the data into
[http://www.gooddata.com/ GoodData], a web-based data analysis tool with collaboration features
somewhat resembling those of social networking web sites. What can you do with your GIT commit data
is to create reports similar to LWN's [http://lwn.net/Articles/363456/ Who wrote...] articles
for [http://kernel.org Linux] kernel releases, or maybe employ analysis similar to what
[https://www.ohloh.net/ Ohloh] does for your project.

== Upload ==

[http://www.perl.org Perl] has a rather stable and active developer community and its source code is
publicly available, therefore its commit history will serve our purpose perfectly.  Let's obtain the
code from the GIT repository first.

  $ git clone git://perl5.git.perl.org/perl.git
  $ cd perl

For illustrational purposes we'll just use the tail of the development history,
since 5.10.0 release which was tagged in December 2007.

  $ git log --date=short --format="format:%h:%aN:%aE:%cd:%ct" --shortstat perl-5.10.0 |
          awk 'BEGIN {print "Commit SHA1 Hash:" \
                  "Author Name:" "Author e-mail:" "Date:" "Timestamp:" \
                  "Files touched:" "Lines added:" "Lines deleted"}
                  /^ / {n=0; print ":"$1":"$4":"$6; next}
                  /^[^ ]/ {if (n) {print ":0:0:0"}; n=1; printf $0}' &gt;history.csv

Most likely there is a better way of obtaining the line changes than piping a {{{shortstat}}}
through {{{awk}}}, but this is the fastest one I could come up with. It would probably have been
a better idea to use a {{{--numstat}}} flag and preserve the per-file change information.

Note that we stick a header line there. That's not strictly required -- we could add it
in the UI instead as well.

<!-- html -->
(Available in
<a href="/~lkundrak/blog/video/git-commits/1_upload.ogg">theora</a>,
<a href="/~lkundrak/blog/video/git-commits/1_upload.avi">h264</a>,
<a href="http://www.youtube.com/watch?v=fivpikzDJTI">youtube</a>)<br>
<video src="/~lkundrak/blog/video/git-commits/1_upload.ogg" controls="true" width="425" height="344">
        <video src="/~lkundrak/blog/video/git-commits/1_upload.avi" controls="true" width="425" height="344">
                <object width="425" height="344">
                        <param name="movie" value="http://www.youtube.com/v/fivpikzDJTI&amp;hl=en_US&amp;fs=1&amp;"></param>
                        <param name="allowFullScreen" value="true"></param>
                        <param name="allowscriptaccess" value="always"></param>
                        <embed width="425" height="344"
                                src="http://www.youtube.com/v/fivpikzDJTI&amp;hl=en_US&amp;fs=1&amp;"
                                type="application/x-shockwave-flash"
                                allowscriptaccess="always"
                                allowfullscreen="true">
                        </embed>
                </object>
        </video>
</video>
<!-- /html -->

During the upload, we mapped the dates to date dimension.

Now let's see create some reports.

<!-- break -->
<!-- /rss:description -->

== Lines report ==

The first report visualizes changes in number of lines added and removed in time.
Given the Perl code is currently frozed for 5.12.0 release the peaks probably aren't
merges of big features, not big refactoring, probably just some scripted bulk changes.

<!-- html -->
(Available in
<a href="/~lkundrak/blog/video/git-commits/2_lines.ogg">theora</a>,
<a href="/~lkundrak/blog/video/git-commits/2_lines.avi">h264</a>,
<a href="http://www.youtube.com/watch?v=8fAEExhJWtM">youtube</a>)<br>
<video src="/~lkundrak/blog/video/git-commits/2_lines.ogg" controls="true" width="425" height="344">
        <video src="/~lkundrak/blog/video/git-commits/2_lines.avi" controls="true" width="425" height="344">
                <object width="425" height="344">
                        <param name="movie" value="http://www.youtube.com/v/8fAEExhJWtM&amp;hl=en_US&amp;fs=1&amp;"></param>
                        <param name="allowFullScreen" value="true"></param>
                        <param name="allowscriptaccess" value="always"></param>
                        <embed width="425" height="344"
                                src="http://www.youtube.com/v/8fAEExhJWtM&amp;hl=en_US&amp;fs=1&amp;"
                                type="application/x-shockwave-flash"
                                allowscriptaccess="always"
                                allowfullscreen="true">
                        </embed>
                </object>
        </video>
</video>
<!-- /html -->

== Commits report ==

I found this one report a bit more interesting. It shows the commiter activity
in the number of commits done. It's a rather simple way to see which developers
are most active -- which, of course, are the culprits when the code breaks :)

<!-- html -->
(Available in
<a href="/~lkundrak/blog/video/git-commits/3_commits.ogg">theora</a>,
<a href="/~lkundrak/blog/video/git-commits/3_commits.avi">h264</a>,
<a href="http://www.youtube.com/watch?v=0ow7BNlKvvk">youtube</a>)<br>
<video src="/~lkundrak/blog/video/git-commits/3_commits.ogg" controls="true" width="425" height="344">
        <video src="/~lkundrak/blog/video/git-commits/3_commits.avi" controls="true" width="425" height="344">
                <object width="425" height="344">
                        <param name="movie" value="http://www.youtube.com/v/0ow7BNlKvvk&amp;hl=en_US&amp;fs=1&amp;"></param>
                        <param name="allowFullScreen" value="true"></param>
                        <param name="allowscriptaccess" value="always"></param>
                        <embed width="425" height="344"
                                src="http://www.youtube.com/v/0ow7BNlKvvk&amp;hl=en_US&amp;fs=1&amp;"
                                type="application/x-shockwave-flash"
                                allowscriptaccess="always"
                                allowfullscreen="true">
                        </embed>
                </object>
        </video>
</video>
<!-- /html -->

I hope you liked it, though if you're a bit familiar with BI, which I'm not, you could
certainly create nicer examples :) Have fun!
